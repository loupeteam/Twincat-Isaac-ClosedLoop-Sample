#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (7.806581277672794, 3.9315664229217555, 2.089673994833518)
                double3 target = (-0.4322926967370906, 1.6363066025039092, 0.19988102229019744)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./MainStage.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            double "rtx:translucency:worldEps" = 0.005
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

over "Render" (
    hide_in_stage_window = true
)
{
}

def Xform "World"
{
    def PhysicsScene "PhysicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        uint physxScene:timeStepsPerSecond = 120
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def Xform "Robot" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI", "OmniScriptingAPI"]
    )
    {
        uniform asset[] omni:scripting:scripts = [] (
            customData = {
                dictionary fileExts = {
                    string "*.py" = "Python File"
                }
            }
        )
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.10000000149011612)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "Plane" (
            delete apiSchemas = ["PhysicsRigidBodyAPI"]
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxRigidBodyAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsRigidBodyAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            rel physics:simulationOwner
            point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 10, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Robot/End1>
                rel physics:body1 = </World/Robot/Plane>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, -5.5, -0.5)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Mesh "Cube" (
            delete apiSchemas = ["PhysicsRigidBodyAPI"]
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxRigidBodyAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsRigidBodyAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            rel physics:simulationOwner
            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsPrismaticJoint "PrismaticJoint" (
                prepend apiSchemas = ["PhysicsJointStateAPI:linear", "PhysicsDriveAPI:linear"]
            )
            {
                float drive:linear:physics:damping = 100000
                float drive:linear:physics:stiffness = 10000000
                float drive:linear:physics:targetPosition = -4.4977126
                float drive:linear:physics:targetVelocity = 0
                uniform token drive:linear:physics:type = "acceleration"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Robot/Cube>
                rel physics:body1 = </World/Robot/Plane>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, 0, -0.5)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float state:linear:physics:position = -0
                float state:linear:physics:velocity = -0
                token visibility = "invisible"
            }
        }

        def Mesh "End1" (
            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "none"
            bool physics:collisionEnabled = 1
            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 5.5, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Mesh "End2" (
            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysxTriangleMeshCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "none"
            bool physics:collisionEnabled = 1
            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, -5.5, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Mesh "Cube" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 4.437085440000001, 0.844566580770624)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.27059805007309856, 0.27059805007309856, 0.6532814824381883)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Xform "Target"
{
}

def "PLC"
{
    def "PLC1"
    {
        custom string beckhoff_bridge:AmsNetId = "1.0.0.209.1.2"
        custom bool beckhoff_bridge:Enable = 1
        custom int beckhoff_bridge:RefreshRate = 10
        custom string beckhoff_bridge:Variables = "MAIN.ax.NcToPlc.SetPos,MAIN.ax.NcToPlc.SetVelo,MAIN.actPos,MAIN.actPosIn"

        def "MAIN"
        {
            def "ax"
            {
                def "NcToPlc"
                {
                    def "SetPos"
                    {
                        custom string symbol = "MAIN.ax.NcToPlc.SetPos"
                        custom double value = -449.77125177452444
                        custom bool write:once = 0
                        custom bool write:pause = 0
                        custom double write:value = 146.3
                    }

                    def "SetVelo"
                    {
                        custom string symbol = "MAIN.ax.NcToPlc.SetVelo"
                        custom double value = 0
                        custom bool write:once = 0
                        custom bool write:pause = 0
                        custom double write:value = 0
                    }
                }
            }

            def "actPos"
            {
                custom string symbol = "MAIN.actPos"
                custom double value = -343.7086486816406
                custom bool write:once = 0
                custom bool write:pause = 0
                custom double write:value = -343.7086486816406
            }

            def "actPosIn"
            {
                custom string symbol = "MAIN.actPosIn"
                custom double value = -449.77125177452444
                custom bool write:once = 0
                custom bool write:pause = 0
                custom double write:value = -449.77125177452444
            }
        }
    }
}

def OmniGraph "ActionGraph"
{
    token evaluationMode = "Automatic"
    token evaluator:type = "execution"
    token fabricCacheBacking = "Shared"
    int2 fileFormatVersion = (1, 9)
    token pipelineStage = "pipelineStageOnDemand"

    def OmniGraphNode "on_physics_step" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        token node:type = "omni.isaac.core_nodes.OnPhysicsStep"
        int node:typeVersion = 1
        custom double outputs:deltaSimulationTime
        custom double outputs:deltaSystemTime
        custom uint outputs:step (
            customData = {
                bool isExecution = 1
            }
        )
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (39, 42)
    }

    def OmniGraphNode "setposReadAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:name = "value"
        custom rel inputs:prim = </PLC/PLC1/MAIN/ax/NcToPlc/SetPos> (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        custom token inputs:primPath
        custom timecode inputs:usdTimecode
        custom bool inputs:usePath
        token node:type = "omni.graph.nodes.ReadPrimAttribute"
        int node:typeVersion = 3
        custom token outputs:value
        custom bool state:correctlySetup
        custom uint64 state:importPath
        custom bool state:reimportAtTime
        custom uint64 state:srcAttrib
        custom uint64 state:srcPath
        custom uint64 state:srcPathAsToken
        custom double state:time
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (45, 181.5)
    }

    def OmniGraphNode "actPosInWriteAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/on_physics_step.outputs:step>
        custom token inputs:name = "write:value"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </PLC/PLC1/MAIN/actPosIn>
        custom token inputs:primPath
        custom bool inputs:usdWriteBack
        custom bool inputs:usePath
        custom token inputs:value (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string resolvedType = "double"
                    }
                }
            }
        )
        prepend token inputs:value.connect = </ActionGraph/setposReadAttrib.outputs:value>
        token node:type = "omni.graph.nodes.WritePrimAttribute"
        int node:typeVersion = 2
        custom uint outputs:execOut (
            customData = {
                bool isExecution = 1
            }
        )
        custom bool state:correctlySetup
        custom uint64 state:destAttrib
        custom uint64 state:destPath
        custom uint64 state:destPathToken
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (694.54517, 98.61867)
    }

    def OmniGraphNode "actPosWriteAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/actPosInWriteAttrib.outputs:execOut>
        custom token inputs:name = "write:value"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </PLC/PLC1/MAIN/actPos>
        custom token inputs:primPath
        custom bool inputs:usdWriteBack
        custom bool inputs:usePath
        custom token inputs:value
        delete token inputs:value.connect = </ActionGraph/PrismaticJointReadAttrib.outputs:value>
        prepend token inputs:value.connect = </ActionGraph/multiply_02.outputs:product>
        token node:type = "omni.graph.nodes.WritePrimAttribute"
        int node:typeVersion = 2
        custom uint outputs:execOut (
            customData = {
                bool isExecution = 1
            }
        )
        custom bool state:correctlySetup
        custom uint64 state:destAttrib
        custom uint64 state:destPath
        custom uint64 state:destPathToken
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (1534.7803, 343.94476)
    }

    def OmniGraphNode "PrismaticJointWriteAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/on_physics_step.outputs:step>
        custom token inputs:name = "drive:linear:physics:targetPosition"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </World/Robot/Cube/PrismaticJoint>
        custom token inputs:primPath
        custom bool inputs:usdWriteBack
        custom bool inputs:usePath
        custom token inputs:value
        delete token inputs:value.connect = </ActionGraph/setposReadAttrib.outputs:value>
        prepend token inputs:value.connect = </ActionGraph/multiply.outputs:product>
        token node:type = "omni.graph.nodes.WritePrimAttribute"
        int node:typeVersion = 2
        custom uint outputs:execOut (
            customData = {
                bool isExecution = 1
            }
        )
        custom bool state:correctlySetup
        custom uint64 state:destAttrib
        custom uint64 state:destPath
        custom uint64 state:destPathToken
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (686.2647, 347.2026)
    }

    def OmniGraphNode "SetVeloReadAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:name = "write:value"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </PLC/PLC1/MAIN/ax/NcToPlc/SetVelo>
        custom token inputs:primPath
        custom timecode inputs:usdTimecode
        custom bool inputs:usePath
        token node:type = "omni.graph.nodes.ReadPrimAttribute"
        int node:typeVersion = 3
        custom token outputs:value
        custom bool state:correctlySetup
        custom uint64 state:importPath
        custom bool state:reimportAtTime
        custom uint64 state:srcAttrib
        custom uint64 state:srcPath
        custom uint64 state:srcPathAsToken
        custom double state:time
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (49.21234, 384.22247)
    }

    def OmniGraphNode "PrismaticJointWriteAttrib_01" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/on_physics_step.outputs:step>
        custom token inputs:name = "drive:linear:physics:targetVelocity"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </World/Robot/Cube/PrismaticJoint>
        custom token inputs:primPath
        custom bool inputs:usdWriteBack
        custom bool inputs:usePath
        custom token inputs:value
        delete token inputs:value.connect = </ActionGraph/SetVeloReadAttrib.outputs:value>
        prepend token inputs:value.connect = </ActionGraph/multiply_01.outputs:product>
        token node:type = "omni.graph.nodes.WritePrimAttribute"
        int node:typeVersion = 2
        custom uint outputs:execOut (
            customData = {
                bool isExecution = 1
            }
        )
        custom bool state:correctlySetup
        custom uint64 state:destAttrib
        custom uint64 state:destPath
        custom uint64 state:destPathToken
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (694.1039, 590.5544)
    }

    def OmniGraphNode "PrismaticJointReadAttrib" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:name = "state:linear:physics:position"
        custom rel inputs:prim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        prepend rel inputs:prim = </World/Robot/Cube/PrismaticJoint>
        custom token inputs:primPath
        custom timecode inputs:usdTimecode
        custom bool inputs:usePath
        token node:type = "omni.graph.nodes.ReadPrimAttribute"
        int node:typeVersion = 3
        custom token outputs:value
        custom bool state:correctlySetup
        custom uint64 state:importPath
        custom bool state:reimportAtTime
        custom uint64 state:srcAttrib
        custom uint64 state:srcPath
        custom uint64 state:srcPathAsToken
        custom double state:time
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (1019.30255, 371.30664)
    }

    def OmniGraphNode "multiply" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:a
        prepend token inputs:a.connect = </ActionGraph/setposReadAttrib.outputs:value>
        custom token inputs:b
        prepend token inputs:b.connect = </ActionGraph/constant_double.inputs:value>
        token node:type = "omni.graph.nodes.Multiply"
        int node:typeVersion = 2
        custom token outputs:product
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (375.92053, 277.15967)
    }

    def OmniGraphNode "multiply_01" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:a
        prepend token inputs:a.connect = </ActionGraph/SetVeloReadAttrib.outputs:value>
        custom token inputs:b
        prepend token inputs:b.connect = </ActionGraph/constant_double.inputs:value>
        token node:type = "omni.graph.nodes.Multiply"
        int node:typeVersion = 2
        custom token outputs:product
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (369.69223, 602.2904)
    }

    def OmniGraphNode "multiply_02" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom token inputs:a
        prepend token inputs:a.connect = </ActionGraph/PrismaticJointReadAttrib.outputs:value>
        custom token inputs:b
        prepend token inputs:b.connect = </ActionGraph/constant_double_01.inputs:value>
        token node:type = "omni.graph.nodes.Multiply"
        int node:typeVersion = 2
        custom token outputs:product
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (1220.5149, 586.09717)
    }

    def OmniGraphNode "constant_double" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom double inputs:value = 0.01
        token node:type = "omni.graph.nodes.ConstantDouble"
        int node:typeVersion = 1
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (71.96581, 735.58295)
    }

    def OmniGraphNode "constant_double_01" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        custom double inputs:value = 100
        token node:type = "omni.graph.nodes.ConstantDouble"
        int node:typeVersion = 1
        uniform token ui:nodegraph:node:expansionState = "open"
        uniform float2 ui:nodegraph:node:pos = (728.45776, 817.8002)
    }
}

